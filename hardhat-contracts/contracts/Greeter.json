{"cairo_code": "%lang starknet\n\nfrom evm.array import validate_array\nfrom evm.calls import calldatacopy, calldataload, calldatasize\nfrom evm.exec_env import ExecutionEnvironment\nfrom evm.hashing import uint256_pedersen\nfrom evm.memory import uint256_mload, uint256_mstore\nfrom evm.uint256 import is_eq, is_gt, is_lt, is_zero, slt, u256_add, u256_shl, u256_shr\nfrom evm.yul_api import warp_return\nfrom starkware.cairo.common.cairo_builtins import BitwiseBuiltin, HashBuiltin\nfrom starkware.cairo.common.default_dict import default_dict_finalize, default_dict_new\nfrom starkware.cairo.common.dict_access import DictAccess\nfrom starkware.cairo.common.registers import get_fp_and_pc\nfrom starkware.cairo.common.uint256 import (\n    Uint256, uint256_and, uint256_not, uint256_or, uint256_sub)\n\nfunc sstore{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        key : Uint256, value : Uint256):\n    evm_storage.write(key, value)\n    return ()\nend\n\nfunc sload{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        value : Uint256):\n    let (value) = evm_storage.read(key)\n    return (value)\nend\n\nfunc __warp_identity_Uint256(arg0 : Uint256) -> (arg0 : Uint256):\n    return (arg0)\nend\n\nfunc __warp_constant_0() -> (res : Uint256):\n    return (Uint256(low=0, high=0))\nend\n\n@storage_var\nfunc evm_storage(arg0 : Uint256) -> (res : Uint256):\nend\n\n@constructor\nfunc constructor{\n        bitwise_ptr : BitwiseBuiltin*, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(calldata_size, calldata_len, calldata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (__fp__, _) = get_fp_and_pc()\n    local exec_env_ : ExecutionEnvironment = ExecutionEnvironment(calldata_size=calldata_size, calldata_len=calldata_len, calldata=calldata, returndata_size=0, returndata_len=0, returndata=cast(0, felt*), to_returndata_size=0, to_returndata_len=0, to_returndata=cast(0, felt*))\n    let exec_env : ExecutionEnvironment* = &exec_env_\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    with exec_env, memory_dict, msize:\n        __constructor_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return ()\nend\n\n@external\nfunc __main{\n        bitwise_ptr : BitwiseBuiltin*, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(calldata_size, calldata_len, calldata : felt*) -> (\n        returndata_size, returndata_len, returndata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (__fp__, _) = get_fp_and_pc()\n    local exec_env_ : ExecutionEnvironment = ExecutionEnvironment(calldata_size=calldata_size, calldata_len=calldata_len, calldata=calldata, returndata_size=0, returndata_len=0, returndata=cast(0, felt*), to_returndata_size=0, to_returndata_len=0, to_returndata=cast(0, felt*))\n    let exec_env : ExecutionEnvironment* = &exec_env_\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    let termination_token = 0\n    with exec_env, memory_dict, msize, termination_token:\n        __main_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return (exec_env.to_returndata_size, exec_env.to_returndata_len, exec_env.to_returndata)\nend\n\nfunc __warp_if_0{bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(\n        __warp_subexpr_0 : Uint256, length : Uint256) -> (length : Uint256):\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        let (length : Uint256) = uint256_and(length, Uint256(low=127, high=0))\n        return (length)\n    else:\n        return (length)\n    end\nend\n\nfunc extract_byte_array_length_deployment{bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(\n        data : Uint256) -> (length : Uint256):\n    alloc_locals\n    let (length : Uint256) = u256_shr(Uint256(low=1, high=0), data)\n    let (outOfPlaceEncoding : Uint256) = uint256_and(data, Uint256(low=1, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_zero(outOfPlaceEncoding)\n    let (length : Uint256) = __warp_if_0(__warp_subexpr_0, length)\n    let (__warp_subexpr_2 : Uint256) = is_lt(length, Uint256(low=32, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_eq(outOfPlaceEncoding, __warp_subexpr_2)\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return (length)\n    end\nend\n\nfunc __warp_loop_body_0{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        array : Uint256, start : Uint256) -> ():\n    alloc_locals\n    sstore(key=start, value=array)\n    return ()\nend\n\nfunc __warp_loop_0{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        _1 : Uint256, array : Uint256, start : Uint256) -> (start : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(start, _1)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        return (start)\n    end\n    __warp_loop_body_0(array, start)\n    let (start : Uint256) = u256_add(start, Uint256(low=1, high=0))\n    let (start : Uint256) = __warp_loop_0(_1, array, start)\n    return (start)\nend\n\nfunc __warp_if_1(__warp_subexpr_2 : Uint256, data : Uint256, deleteStart : Uint256) -> (\n        deleteStart : Uint256):\n    alloc_locals\n    if __warp_subexpr_2.low + __warp_subexpr_2.high != 0:\n        let deleteStart : Uint256 = data\n        return (deleteStart)\n    else:\n        return (deleteStart)\n    end\nend\n\nfunc __warp_block_0{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        len : Uint256, startIndex : Uint256) -> ():\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (data : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    let (__warp_subexpr_1 : Uint256) = u256_add(startIndex, Uint256(low=31, high=0))\n    let (__warp_subexpr_0 : Uint256) = u256_shr(Uint256(low=5, high=0), __warp_subexpr_1)\n    let (deleteStart : Uint256) = u256_add(data, __warp_subexpr_0)\n    let (__warp_subexpr_2 : Uint256) = is_lt(startIndex, Uint256(low=32, high=0))\n    let (deleteStart : Uint256) = __warp_if_1(__warp_subexpr_2, data, deleteStart)\n    let (__warp_subexpr_4 : Uint256) = u256_add(len, Uint256(low=31, high=0))\n    let (__warp_subexpr_3 : Uint256) = u256_shr(Uint256(low=5, high=0), __warp_subexpr_4)\n    let (_1 : Uint256) = u256_add(data, __warp_subexpr_3)\n    let start : Uint256 = deleteStart\n    let (start : Uint256) = __warp_loop_0(_1, Uint256(low=0, high=0), start)\n    return ()\nend\n\nfunc __warp_if_2{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, len : Uint256, startIndex : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_0(len, startIndex)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc clean_up_bytearray_end_slots_string_storage_deployment{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        len : Uint256, startIndex : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_gt(len, Uint256(low=31, high=0))\n    __warp_if_2(__warp_subexpr_0, len, startIndex)\n    return ()\nend\n\nfunc array_dataslot_string_storage_deployment{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr}() -> (data : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (data : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    return (data)\nend\n\nfunc __warp_loop_body_1{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        dstPtr : Uint256, src : Uint256, srcOffset : Uint256, srcOffset_1 : Uint256) -> (\n        dstPtr : Uint256, srcOffset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(src, srcOffset)\n    let (__warp_subexpr_0 : Uint256) = uint256_mload(__warp_subexpr_1)\n    sstore(key=dstPtr, value=__warp_subexpr_0)\n    let (dstPtr : Uint256) = u256_add(dstPtr, Uint256(low=1, high=0))\n    let (srcOffset : Uint256) = u256_add(srcOffset, srcOffset_1)\n    return (dstPtr, srcOffset)\nend\n\nfunc __warp_loop_1{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        dstPtr : Uint256, i : Uint256, loopEnd : Uint256, src : Uint256, srcOffset : Uint256,\n        srcOffset_1 : Uint256) -> (dstPtr : Uint256, i : Uint256, srcOffset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(i, loopEnd)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        return (dstPtr, i, srcOffset)\n    end\n    let (dstPtr : Uint256, srcOffset : Uint256) = __warp_loop_body_1(\n        dstPtr, src, srcOffset, srcOffset_1)\n    let (i : Uint256) = u256_add(i, srcOffset_1)\n    let (dstPtr : Uint256, i : Uint256, srcOffset : Uint256) = __warp_loop_1(\n        dstPtr, i, loopEnd, src, srcOffset, srcOffset_1)\n    return (dstPtr, i, srcOffset)\nend\n\nfunc extract_used_part_and_set_length_of_short_byte_array_deployment{\n        bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(data : Uint256, len : Uint256) -> (\n        used : Uint256):\n    alloc_locals\n    let (__warp_subexpr_4 : Uint256) = u256_shl(Uint256(low=3, high=0), len)\n    let (__warp_subexpr_3 : Uint256) = u256_shr(\n        __warp_subexpr_4,\n        Uint256(low=340282366920938463463374607431768211455, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_2 : Uint256) = uint256_not(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = u256_shl(Uint256(low=1, high=0), len)\n    let (__warp_subexpr_0 : Uint256) = uint256_and(data, __warp_subexpr_2)\n    let (used : Uint256) = uint256_or(__warp_subexpr_0, __warp_subexpr_1)\n    return (used)\nend\n\nfunc __warp_block_4{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        dstPtr : Uint256, newLen : Uint256, src : Uint256, srcOffset : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = u256_add(src, srcOffset)\n    let (lastValue : Uint256) = uint256_mload(__warp_subexpr_0)\n    let (__warp_subexpr_5 : Uint256) = u256_shl(Uint256(low=3, high=0), newLen)\n    let (__warp_subexpr_4 : Uint256) = uint256_and(__warp_subexpr_5, Uint256(low=248, high=0))\n    let (__warp_subexpr_3 : Uint256) = u256_shr(\n        __warp_subexpr_4,\n        Uint256(low=340282366920938463463374607431768211455, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_2 : Uint256) = uint256_not(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = uint256_and(lastValue, __warp_subexpr_2)\n    sstore(key=dstPtr, value=__warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_if_3{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, dstPtr : Uint256, newLen : Uint256, src : Uint256,\n        srcOffset : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_4(dstPtr, newLen, src, srcOffset)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_3{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (srcOffset : Uint256):\n    alloc_locals\n    let (loopEnd : Uint256) = uint256_and(\n        newLen,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (dstPtr : Uint256) = array_dataslot_string_storage_deployment()\n    let i : Uint256 = Uint256(low=0, high=0)\n    let (dstPtr : Uint256, i : Uint256, srcOffset : Uint256) = __warp_loop_1(\n        dstPtr, i, loopEnd, src, srcOffset, Uint256(low=32, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_lt(loopEnd, newLen)\n    __warp_if_3(__warp_subexpr_0, dstPtr, newLen, src, srcOffset)\n    let (__warp_subexpr_2 : Uint256) = u256_shl(Uint256(low=1, high=0), newLen)\n    let (__warp_subexpr_1 : Uint256) = u256_add(__warp_subexpr_2, Uint256(low=1, high=0))\n    sstore(key=Uint256(low=0, high=0), value=__warp_subexpr_1)\n    return (srcOffset)\nend\n\nfunc __warp_block_6{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        src : Uint256, srcOffset : Uint256) -> (value : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = u256_add(src, srcOffset)\n    let (value : Uint256) = uint256_mload(__warp_subexpr_0)\n    return (value)\nend\n\nfunc __warp_if_4{bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256, value : Uint256) -> (value : Uint256):\n    alloc_locals\n    if newLen.low + newLen.high != 0:\n        let (value : Uint256) = __warp_block_6(src, srcOffset)\n        return (value)\n    else:\n        return (value)\n    end\nend\n\nfunc __warp_block_5{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256) -> ():\n    alloc_locals\n    let value : Uint256 = Uint256(low=0, high=0)\n    let (value : Uint256) = __warp_if_4(newLen, src, srcOffset, value)\n    let (\n        __warp_subexpr_0 : Uint256) = extract_used_part_and_set_length_of_short_byte_array_deployment(\n        value, newLen)\n    sstore(key=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    return ()\nend\n\nfunc __warp_if_5{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (\n        srcOffset : Uint256):\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        let (srcOffset : Uint256) = __warp_block_3(newLen, src, srcOffset)\n        return (srcOffset)\n    else:\n        __warp_block_5(newLen, src, srcOffset)\n        return (srcOffset)\n    end\nend\n\nfunc __warp_block_2{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        match_var : Uint256, newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (\n        srcOffset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1, high=0))\n    let (srcOffset : Uint256) = __warp_if_5(__warp_subexpr_0, newLen, src, srcOffset)\n    return (srcOffset)\nend\n\nfunc __warp_block_1{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (srcOffset : Uint256):\n    alloc_locals\n    let (match_var : Uint256) = is_gt(newLen, Uint256(low=31, high=0))\n    let (srcOffset : Uint256) = __warp_block_2(match_var, newLen, src, srcOffset)\n    return (srcOffset)\nend\n\nfunc copy_byte_array_to_storage_from_string_to_string_deployment{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(src : Uint256) -> ():\n    alloc_locals\n    let (newLen : Uint256) = uint256_mload(src)\n    let (__warp_subexpr_0 : Uint256) = is_gt(newLen, Uint256(low=18446744073709551615, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_2 : Uint256) = sload(Uint256(low=0, high=0))\n    let (__warp_subexpr_1 : Uint256) = extract_byte_array_length_deployment(__warp_subexpr_2)\n    clean_up_bytearray_end_slots_string_storage_deployment(__warp_subexpr_1, newLen)\n    let srcOffset : Uint256 = Uint256(low=32, high=0)\n    let (srcOffset : Uint256) = __warp_block_1(newLen, src, srcOffset)\n    return ()\nend\n\nfunc __constructor_meat{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = __warp_identity_Uint256(Uint256(low=128, high=0))\n    uint256_mstore(offset=Uint256(low=64, high=0), value=__warp_subexpr_0)\n    let (__warp_subexpr_1 : Uint256) = __warp_constant_0()\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_3 : Uint256) = calldatasize()\n    let (__warp_subexpr_2 : Uint256) = slt(__warp_subexpr_3, Uint256(low=32, high=0))\n    if __warp_subexpr_2.low + __warp_subexpr_2.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (offset : Uint256) = calldataload(Uint256(low=0, high=0))\n    let (__warp_subexpr_4 : Uint256) = is_gt(offset, Uint256(low=18446744073709551615, high=0))\n    if __warp_subexpr_4.low + __warp_subexpr_4.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_8 : Uint256) = calldatasize()\n    let (__warp_subexpr_7 : Uint256) = u256_add(offset, Uint256(low=31, high=0))\n    let (__warp_subexpr_6 : Uint256) = slt(__warp_subexpr_7, __warp_subexpr_8)\n    let (__warp_subexpr_5 : Uint256) = is_zero(__warp_subexpr_6)\n    if __warp_subexpr_5.low + __warp_subexpr_5.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (_3 : Uint256) = calldataload(offset)\n    let (__warp_subexpr_9 : Uint256) = is_gt(_3, Uint256(low=18446744073709551615, high=0))\n    if __warp_subexpr_9.low + __warp_subexpr_9.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (memPtr : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_13 : Uint256) = u256_add(_3, Uint256(low=31, high=0))\n    let (__warp_subexpr_12 : Uint256) = uint256_and(\n        __warp_subexpr_13,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_11 : Uint256) = u256_add(__warp_subexpr_12, Uint256(low=63, high=0))\n    let (__warp_subexpr_10 : Uint256) = uint256_and(\n        __warp_subexpr_11,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (newFreePtr : Uint256) = u256_add(memPtr, __warp_subexpr_10)\n    let (__warp_subexpr_16 : Uint256) = is_lt(newFreePtr, memPtr)\n    let (__warp_subexpr_15 : Uint256) = is_gt(newFreePtr, Uint256(low=18446744073709551615, high=0))\n    let (__warp_subexpr_14 : Uint256) = uint256_or(__warp_subexpr_15, __warp_subexpr_16)\n    if __warp_subexpr_14.low + __warp_subexpr_14.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=64, high=0), value=newFreePtr)\n    uint256_mstore(offset=memPtr, value=_3)\n    let (__warp_subexpr_20 : Uint256) = u256_add(offset, _3)\n    let (__warp_subexpr_19 : Uint256) = calldatasize()\n    let (__warp_subexpr_18 : Uint256) = u256_add(__warp_subexpr_20, Uint256(low=32, high=0))\n    let (__warp_subexpr_17 : Uint256) = is_gt(__warp_subexpr_18, __warp_subexpr_19)\n    if __warp_subexpr_17.low + __warp_subexpr_17.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_22 : Uint256) = u256_add(offset, Uint256(low=32, high=0))\n    let (__warp_subexpr_21 : Uint256) = u256_add(memPtr, Uint256(low=32, high=0))\n    calldatacopy(__warp_subexpr_21, __warp_subexpr_22, _3)\n    let (__warp_subexpr_24 : Uint256) = u256_add(memPtr, _3)\n    let (__warp_subexpr_23 : Uint256) = u256_add(__warp_subexpr_24, Uint256(low=32, high=0))\n    uint256_mstore(offset=__warp_subexpr_23, value=Uint256(low=0, high=0))\n    copy_byte_array_to_storage_from_string_to_string_deployment(memPtr)\n    return ()\nend\n\nfunc finalize_allocation{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        memPtr : Uint256, size : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(size, Uint256(low=31, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_and(\n        __warp_subexpr_1,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (newFreePtr : Uint256) = u256_add(memPtr, __warp_subexpr_0)\n    let (__warp_subexpr_4 : Uint256) = is_lt(newFreePtr, memPtr)\n    let (__warp_subexpr_3 : Uint256) = is_gt(newFreePtr, Uint256(low=18446744073709551615, high=0))\n    let (__warp_subexpr_2 : Uint256) = uint256_or(__warp_subexpr_3, __warp_subexpr_4)\n    if __warp_subexpr_2.low + __warp_subexpr_2.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=64, high=0), value=newFreePtr)\n    return ()\nend\n\nfunc __warp_if_6{bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(\n        __warp_subexpr_0 : Uint256, length : Uint256) -> (length : Uint256):\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        let (length : Uint256) = uint256_and(length, Uint256(low=127, high=0))\n        return (length)\n    else:\n        return (length)\n    end\nend\n\nfunc extract_byte_array_length{bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(data : Uint256) -> (\n        length : Uint256):\n    alloc_locals\n    let (length : Uint256) = u256_shr(Uint256(low=1, high=0), data)\n    let (outOfPlaceEncoding : Uint256) = uint256_and(data, Uint256(low=1, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_zero(outOfPlaceEncoding)\n    let (length : Uint256) = __warp_if_6(__warp_subexpr_0, length)\n    let (__warp_subexpr_2 : Uint256) = is_lt(length, Uint256(low=32, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_eq(outOfPlaceEncoding, __warp_subexpr_2)\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return (length)\n    end\nend\n\nfunc __warp_loop_body_4{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        _1 : Uint256, start : Uint256) -> ():\n    alloc_locals\n    sstore(key=start, value=_1)\n    return ()\nend\n\nfunc __warp_loop_4{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        _1 : Uint256, _2 : Uint256, start : Uint256) -> (start : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(start, _2)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        return (start)\n    end\n    __warp_loop_body_4(_1, start)\n    let (start : Uint256) = u256_add(start, Uint256(low=1, high=0))\n    let (start : Uint256) = __warp_loop_4(_1, _2, start)\n    return (start)\nend\n\nfunc __warp_if_7(__warp_subexpr_2 : Uint256, data : Uint256, deleteStart : Uint256) -> (\n        deleteStart : Uint256):\n    alloc_locals\n    if __warp_subexpr_2.low + __warp_subexpr_2.high != 0:\n        let deleteStart : Uint256 = data\n        return (deleteStart)\n    else:\n        return (deleteStart)\n    end\nend\n\nfunc __warp_block_7{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        len : Uint256, startIndex : Uint256) -> ():\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (data : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    let (__warp_subexpr_1 : Uint256) = u256_add(startIndex, Uint256(low=31, high=0))\n    let (__warp_subexpr_0 : Uint256) = u256_shr(Uint256(low=5, high=0), __warp_subexpr_1)\n    let (deleteStart : Uint256) = u256_add(data, __warp_subexpr_0)\n    let (__warp_subexpr_2 : Uint256) = is_lt(startIndex, Uint256(low=32, high=0))\n    let (deleteStart : Uint256) = __warp_if_7(__warp_subexpr_2, data, deleteStart)\n    let (__warp_subexpr_4 : Uint256) = u256_add(len, Uint256(low=31, high=0))\n    let (__warp_subexpr_3 : Uint256) = u256_shr(Uint256(low=5, high=0), __warp_subexpr_4)\n    let (_2 : Uint256) = u256_add(data, __warp_subexpr_3)\n    let start : Uint256 = deleteStart\n    let (start : Uint256) = __warp_loop_4(Uint256(low=0, high=0), _2, start)\n    return ()\nend\n\nfunc __warp_if_8{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, len : Uint256, startIndex : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_7(len, startIndex)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc clean_up_bytearray_end_slots_string_storage{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        len : Uint256, startIndex : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_gt(len, Uint256(low=31, high=0))\n    __warp_if_8(__warp_subexpr_0, len, startIndex)\n    return ()\nend\n\nfunc array_dataslot_string_storage{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr}() -> (data : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (data : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    return (data)\nend\n\nfunc __warp_loop_body_5{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        dstPtr : Uint256, src : Uint256, srcOffset : Uint256, srcOffset_1 : Uint256) -> (\n        dstPtr : Uint256, srcOffset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(src, srcOffset)\n    let (__warp_subexpr_0 : Uint256) = uint256_mload(__warp_subexpr_1)\n    sstore(key=dstPtr, value=__warp_subexpr_0)\n    let (dstPtr : Uint256) = u256_add(dstPtr, Uint256(low=1, high=0))\n    let (srcOffset : Uint256) = u256_add(srcOffset, srcOffset_1)\n    return (dstPtr, srcOffset)\nend\n\nfunc __warp_loop_5{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        dstPtr : Uint256, i : Uint256, loopEnd : Uint256, src : Uint256, srcOffset : Uint256,\n        srcOffset_1 : Uint256) -> (dstPtr : Uint256, i : Uint256, srcOffset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(i, loopEnd)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        return (dstPtr, i, srcOffset)\n    end\n    let (dstPtr : Uint256, srcOffset : Uint256) = __warp_loop_body_5(\n        dstPtr, src, srcOffset, srcOffset_1)\n    let (i : Uint256) = u256_add(i, srcOffset_1)\n    let (dstPtr : Uint256, i : Uint256, srcOffset : Uint256) = __warp_loop_5(\n        dstPtr, i, loopEnd, src, srcOffset, srcOffset_1)\n    return (dstPtr, i, srcOffset)\nend\n\nfunc extract_used_part_and_set_length_of_short_byte_array{\n        bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(data : Uint256, len : Uint256) -> (\n        used : Uint256):\n    alloc_locals\n    let (__warp_subexpr_4 : Uint256) = u256_shl(Uint256(low=3, high=0), len)\n    let (__warp_subexpr_3 : Uint256) = u256_shr(\n        __warp_subexpr_4,\n        Uint256(low=340282366920938463463374607431768211455, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_2 : Uint256) = uint256_not(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = u256_shl(Uint256(low=1, high=0), len)\n    let (__warp_subexpr_0 : Uint256) = uint256_and(data, __warp_subexpr_2)\n    let (used : Uint256) = uint256_or(__warp_subexpr_0, __warp_subexpr_1)\n    return (used)\nend\n\nfunc __warp_block_11{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        dstPtr : Uint256, newLen : Uint256, src : Uint256, srcOffset : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = u256_add(src, srcOffset)\n    let (lastValue : Uint256) = uint256_mload(__warp_subexpr_0)\n    let (__warp_subexpr_5 : Uint256) = u256_shl(Uint256(low=3, high=0), newLen)\n    let (__warp_subexpr_4 : Uint256) = uint256_and(__warp_subexpr_5, Uint256(low=248, high=0))\n    let (__warp_subexpr_3 : Uint256) = u256_shr(\n        __warp_subexpr_4,\n        Uint256(low=340282366920938463463374607431768211455, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_2 : Uint256) = uint256_not(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = uint256_and(lastValue, __warp_subexpr_2)\n    sstore(key=dstPtr, value=__warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_if_9{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, dstPtr : Uint256, newLen : Uint256, src : Uint256,\n        srcOffset : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_11(dstPtr, newLen, src, srcOffset)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_10{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (srcOffset : Uint256):\n    alloc_locals\n    let (loopEnd : Uint256) = uint256_and(\n        newLen,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (dstPtr : Uint256) = array_dataslot_string_storage()\n    let i : Uint256 = Uint256(low=0, high=0)\n    let (dstPtr : Uint256, i : Uint256, srcOffset : Uint256) = __warp_loop_5(\n        dstPtr, i, loopEnd, src, srcOffset, Uint256(low=32, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_lt(loopEnd, newLen)\n    __warp_if_9(__warp_subexpr_0, dstPtr, newLen, src, srcOffset)\n    let (__warp_subexpr_2 : Uint256) = u256_shl(Uint256(low=1, high=0), newLen)\n    let (__warp_subexpr_1 : Uint256) = u256_add(__warp_subexpr_2, Uint256(low=1, high=0))\n    sstore(key=Uint256(low=0, high=0), value=__warp_subexpr_1)\n    return (srcOffset)\nend\n\nfunc __warp_block_13{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        src : Uint256, srcOffset : Uint256) -> (value : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = u256_add(src, srcOffset)\n    let (value : Uint256) = uint256_mload(__warp_subexpr_0)\n    return (value)\nend\n\nfunc __warp_if_10{bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256, value : Uint256) -> (value : Uint256):\n    alloc_locals\n    if newLen.low + newLen.high != 0:\n        let (value : Uint256) = __warp_block_13(src, srcOffset)\n        return (value)\n    else:\n        return (value)\n    end\nend\n\nfunc __warp_block_12{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256) -> ():\n    alloc_locals\n    let value : Uint256 = Uint256(low=0, high=0)\n    let (value : Uint256) = __warp_if_10(newLen, src, srcOffset, value)\n    let (__warp_subexpr_0 : Uint256) = extract_used_part_and_set_length_of_short_byte_array(\n        value, newLen)\n    sstore(key=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    return ()\nend\n\nfunc __warp_if_11{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (\n        srcOffset : Uint256):\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        let (srcOffset : Uint256) = __warp_block_10(newLen, src, srcOffset)\n        return (srcOffset)\n    else:\n        __warp_block_12(newLen, src, srcOffset)\n        return (srcOffset)\n    end\nend\n\nfunc __warp_block_9{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        match_var : Uint256, newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (\n        srcOffset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1, high=0))\n    let (srcOffset : Uint256) = __warp_if_11(__warp_subexpr_0, newLen, src, srcOffset)\n    return (srcOffset)\nend\n\nfunc __warp_block_8{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        newLen : Uint256, src : Uint256, srcOffset : Uint256) -> (srcOffset : Uint256):\n    alloc_locals\n    let (match_var : Uint256) = is_gt(newLen, Uint256(low=31, high=0))\n    let (srcOffset : Uint256) = __warp_block_9(match_var, newLen, src, srcOffset)\n    return (srcOffset)\nend\n\nfunc copy_byte_array_to_storage_from_string_to_string{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(src : Uint256) -> ():\n    alloc_locals\n    let (newLen : Uint256) = uint256_mload(src)\n    let (__warp_subexpr_0 : Uint256) = is_gt(newLen, Uint256(low=18446744073709551615, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_2 : Uint256) = sload(Uint256(low=0, high=0))\n    let (__warp_subexpr_1 : Uint256) = extract_byte_array_length(__warp_subexpr_2)\n    clean_up_bytearray_end_slots_string_storage(__warp_subexpr_1, newLen)\n    let srcOffset : Uint256 = Uint256(low=32, high=0)\n    let (srcOffset : Uint256) = __warp_block_8(newLen, src, srcOffset)\n    return ()\nend\n\nfunc abi_decode{range_check_ptr}(dataEnd : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=0, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc __warp_loop_body_3{\n        memory_dict : DictAccess*, msize, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(\n        _1 : Uint256, _2 : Uint256, dataPos : Uint256, i : Uint256, memPtr : Uint256) -> (\n        dataPos : Uint256):\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = u256_add(memPtr, i)\n    let (__warp_subexpr_1 : Uint256) = sload(dataPos)\n    let (__warp_subexpr_0 : Uint256) = u256_add(__warp_subexpr_2, _1)\n    uint256_mstore(offset=__warp_subexpr_0, value=__warp_subexpr_1)\n    let (dataPos : Uint256) = u256_add(dataPos, _2)\n    return (dataPos)\nend\n\nfunc __warp_loop_3{\n        memory_dict : DictAccess*, msize, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(\n        _1 : Uint256, _2 : Uint256, dataPos : Uint256, i : Uint256, length : Uint256,\n        memPtr : Uint256) -> (dataPos : Uint256, i : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(i, length)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        return (dataPos, i)\n    end\n    let (dataPos : Uint256) = __warp_loop_body_3(_1, _2, dataPos, i, memPtr)\n    let (i : Uint256) = u256_add(i, _1)\n    let (dataPos : Uint256, i : Uint256) = __warp_loop_3(_1, _2, dataPos, i, length, memPtr)\n    return (dataPos, i)\nend\n\nfunc __warp_block_16{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        memPtr : Uint256, slotValue : Uint256) -> (ret__warp_mangled : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = uint256_and(\n        slotValue,\n        Uint256(low=340282366920938463463374607431768211200, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = u256_add(memPtr, Uint256(low=32, high=0))\n    uint256_mstore(offset=__warp_subexpr_0, value=__warp_subexpr_1)\n    let (ret__warp_mangled : Uint256) = u256_add(memPtr, Uint256(low=64, high=0))\n    return (ret__warp_mangled)\nend\n\nfunc __warp_block_18{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        length : Uint256, memPtr : Uint256) -> (ret__warp_mangled : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (dataPos : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    let i : Uint256 = Uint256(low=0, high=0)\n    let (dataPos : Uint256, i : Uint256) = __warp_loop_3(\n        Uint256(low=32, high=0), Uint256(low=1, high=0), dataPos, i, length, memPtr)\n    let (__warp_subexpr_0 : Uint256) = u256_add(memPtr, i)\n    let (ret__warp_mangled : Uint256) = u256_add(__warp_subexpr_0, Uint256(low=32, high=0))\n    return (ret__warp_mangled)\nend\n\nfunc __warp_if_12{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, length : Uint256, memPtr : Uint256,\n        ret__warp_mangled : Uint256) -> (ret__warp_mangled : Uint256):\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        let (ret__warp_mangled : Uint256) = __warp_block_18(length, memPtr)\n        return (ret__warp_mangled)\n    else:\n        return (ret__warp_mangled)\n    end\nend\n\nfunc __warp_block_17{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        length : Uint256, match_var : Uint256, memPtr : Uint256, ret__warp_mangled : Uint256) -> (\n        ret__warp_mangled : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1, high=0))\n    let (ret__warp_mangled : Uint256) = __warp_if_12(\n        __warp_subexpr_0, length, memPtr, ret__warp_mangled)\n    return (ret__warp_mangled)\nend\n\nfunc __warp_if_13{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_0 : Uint256, length : Uint256, match_var : Uint256, memPtr : Uint256,\n        ret__warp_mangled : Uint256, slotValue : Uint256) -> (ret__warp_mangled : Uint256):\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        let (ret__warp_mangled : Uint256) = __warp_block_16(memPtr, slotValue)\n        return (ret__warp_mangled)\n    else:\n        let (ret__warp_mangled : Uint256) = __warp_block_17(\n            length, match_var, memPtr, ret__warp_mangled)\n        return (ret__warp_mangled)\n    end\nend\n\nfunc __warp_block_15{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        length : Uint256, match_var : Uint256, memPtr : Uint256, ret__warp_mangled : Uint256,\n        slotValue : Uint256) -> (ret__warp_mangled : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=0, high=0))\n    let (ret__warp_mangled : Uint256) = __warp_if_13(\n        __warp_subexpr_0, length, match_var, memPtr, ret__warp_mangled, slotValue)\n    return (ret__warp_mangled)\nend\n\nfunc __warp_block_14{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        length : Uint256, memPtr : Uint256, ret__warp_mangled : Uint256, slotValue : Uint256) -> (\n        ret__warp_mangled : Uint256):\n    alloc_locals\n    let (match_var : Uint256) = uint256_and(slotValue, Uint256(low=1, high=0))\n    let (ret__warp_mangled : Uint256) = __warp_block_15(\n        length, match_var, memPtr, ret__warp_mangled, slotValue)\n    return (ret__warp_mangled)\nend\n\nfunc copy_array_from_storage_to_memory_string{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}() -> (memPtr : Uint256):\n    alloc_locals\n    let (memPtr : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let ret__warp_mangled : Uint256 = Uint256(low=0, high=0)\n    let (slotValue : Uint256) = sload(Uint256(low=0, high=0))\n    let (length : Uint256) = extract_byte_array_length(slotValue)\n    uint256_mstore(offset=memPtr, value=length)\n    let (ret__warp_mangled : Uint256) = __warp_block_14(\n        length, memPtr, ret__warp_mangled, slotValue)\n    let (__warp_subexpr_0 : Uint256) = uint256_sub(ret__warp_mangled, memPtr)\n    finalize_allocation(memPtr, __warp_subexpr_0)\n    return (memPtr)\nend\n\nfunc __warp_loop_body_2{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        _1 : Uint256, headStart : Uint256, i : Uint256, value0 : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_4 : Uint256) = u256_add(value0, i)\n    let (__warp_subexpr_3 : Uint256) = u256_add(__warp_subexpr_4, _1)\n    let (__warp_subexpr_2 : Uint256) = u256_add(headStart, i)\n    let (__warp_subexpr_1 : Uint256) = uint256_mload(__warp_subexpr_3)\n    let (__warp_subexpr_0 : Uint256) = u256_add(__warp_subexpr_2, Uint256(low=64, high=0))\n    uint256_mstore(offset=__warp_subexpr_0, value=__warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_loop_2{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        _1 : Uint256, headStart : Uint256, i : Uint256, length : Uint256, value0 : Uint256) -> (\n        i : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(i, length)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        return (i)\n    end\n    __warp_loop_body_2(_1, headStart, i, value0)\n    let (i : Uint256) = u256_add(i, _1)\n    let (i : Uint256) = __warp_loop_2(_1, headStart, i, length, value0)\n    return (i)\nend\n\nfunc __warp_block_19{memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, length : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(headStart, length)\n    let (__warp_subexpr_0 : Uint256) = u256_add(__warp_subexpr_1, Uint256(low=64, high=0))\n    uint256_mstore(offset=__warp_subexpr_0, value=Uint256(low=0, high=0))\n    return ()\nend\n\nfunc __warp_if_14{memory_dict : DictAccess*, msize, range_check_ptr}(\n        __warp_subexpr_1 : Uint256, headStart : Uint256, length : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        __warp_block_19(headStart, length)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc abi_encode_string{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, value0 : Uint256) -> (tail : Uint256):\n    alloc_locals\n    uint256_mstore(offset=headStart, value=Uint256(low=32, high=0))\n    let (length : Uint256) = uint256_mload(value0)\n    let (__warp_subexpr_0 : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    uint256_mstore(offset=__warp_subexpr_0, value=length)\n    let i : Uint256 = Uint256(low=0, high=0)\n    let (i : Uint256) = __warp_loop_2(Uint256(low=32, high=0), headStart, i, length, value0)\n    let (__warp_subexpr_1 : Uint256) = is_gt(i, length)\n    __warp_if_14(__warp_subexpr_1, headStart, length)\n    let (__warp_subexpr_4 : Uint256) = u256_add(length, Uint256(low=31, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_and(\n        __warp_subexpr_4,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_2 : Uint256) = u256_add(headStart, __warp_subexpr_3)\n    let (tail : Uint256) = u256_add(__warp_subexpr_2, Uint256(low=64, high=0))\n    return (tail)\nend\n\nfunc __warp_block_23{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = calldatasize()\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        __warp_subexpr_2,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=32, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (offset : Uint256) = calldataload(Uint256(low=4, high=0))\n    let (__warp_subexpr_3 : Uint256) = is_gt(offset, Uint256(low=18446744073709551615, high=0))\n    if __warp_subexpr_3.low + __warp_subexpr_3.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_7 : Uint256) = calldatasize()\n    let (__warp_subexpr_6 : Uint256) = u256_add(offset, Uint256(low=35, high=0))\n    let (__warp_subexpr_5 : Uint256) = slt(__warp_subexpr_6, __warp_subexpr_7)\n    let (__warp_subexpr_4 : Uint256) = is_zero(__warp_subexpr_5)\n    if __warp_subexpr_4.low + __warp_subexpr_4.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_8 : Uint256) = u256_add(Uint256(low=4, high=0), offset)\n    let (_3 : Uint256) = calldataload(__warp_subexpr_8)\n    let (__warp_subexpr_9 : Uint256) = is_gt(_3, Uint256(low=18446744073709551615, high=0))\n    if __warp_subexpr_9.low + __warp_subexpr_9.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (memPtr : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_12 : Uint256) = u256_add(_3, Uint256(low=31, high=0))\n    let (__warp_subexpr_11 : Uint256) = uint256_and(\n        __warp_subexpr_12,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_10 : Uint256) = u256_add(__warp_subexpr_11, Uint256(low=32, high=0))\n    finalize_allocation(memPtr, __warp_subexpr_10)\n    uint256_mstore(offset=memPtr, value=_3)\n    let (__warp_subexpr_16 : Uint256) = u256_add(offset, _3)\n    let (__warp_subexpr_15 : Uint256) = calldatasize()\n    let (__warp_subexpr_14 : Uint256) = u256_add(__warp_subexpr_16, Uint256(low=36, high=0))\n    let (__warp_subexpr_13 : Uint256) = is_gt(__warp_subexpr_14, __warp_subexpr_15)\n    if __warp_subexpr_13.low + __warp_subexpr_13.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_18 : Uint256) = u256_add(offset, Uint256(low=36, high=0))\n    let (__warp_subexpr_17 : Uint256) = u256_add(memPtr, Uint256(low=32, high=0))\n    calldatacopy(__warp_subexpr_17, __warp_subexpr_18, _3)\n    let (__warp_subexpr_20 : Uint256) = u256_add(memPtr, _3)\n    let (__warp_subexpr_19 : Uint256) = u256_add(__warp_subexpr_20, Uint256(low=32, high=0))\n    uint256_mstore(offset=__warp_subexpr_19, value=Uint256(low=0, high=0))\n    copy_byte_array_to_storage_from_string_to_string(memPtr)\n    let (__warp_subexpr_21 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    warp_return(__warp_subexpr_21, Uint256(low=0, high=0))\n    return ()\nend\n\nfunc __warp_block_25{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (converted : Uint256) = copy_array_from_storage_to_memory_string()\n    let (memPos : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_string(memPos, converted)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos)\n    warp_return(memPos, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_if_15{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_25()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_24{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=3484299799, high=0))\n    __warp_if_15(__warp_subexpr_0)\n    return ()\nend\n\nfunc __warp_if_16{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_23()\n        return ()\n    else:\n        __warp_block_24(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_22{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2752735330, high=0))\n    __warp_if_16(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_block_21{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldataload(Uint256(low=0, high=0))\n    let (match_var : Uint256) = u256_shr(Uint256(low=224, high=0), __warp_subexpr_0)\n    __warp_block_22(match_var)\n    return ()\nend\n\nfunc __warp_block_20{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    __warp_block_21()\n    return ()\nend\n\nfunc __warp_if_17{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_1 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        __warp_block_20()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __main_meat{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = __warp_identity_Uint256(Uint256(low=128, high=0))\n    uint256_mstore(offset=Uint256(low=64, high=0), value=__warp_subexpr_0)\n    let (__warp_subexpr_3 : Uint256) = calldatasize()\n    let (__warp_subexpr_2 : Uint256) = is_lt(__warp_subexpr_3, Uint256(low=4, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_zero(__warp_subexpr_2)\n    __warp_if_17(__warp_subexpr_1)\n    if termination_token == 1:\n        return ()\n    end\n    assert 0 = 1\n    jmp rel 0\nend\n", "sol_abi": [{"inputs": [{"internalType": "string", "name": "_greeting", "type": "string"}], "stateMutability": "nonpayable", "type": "constructor"}, {"inputs": [], "name": "greet", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "string", "name": "_greeting", "type": "string"}], "name": "setGreeting", "outputs": [], "stateMutability": "nonpayable", "type": "function"}]}